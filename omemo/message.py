from abc import ABC, abstractmethod
from typing import NamedTuple, Optional, Set, Tuple

class Content(ABC):
    """
    The encrypted content of an OMEMO-encrypted message. Contains for example the ciphertext, but can contain
    other backend-specific data that is shared between all recipients.
    """

class KeyMaterial(ABC):
    """
    Encrypted key material. When decrypted, the key material can in turn be used to decrypt the content. One
    collection of key material is included in an OMEMO-encrypted message per recipient. Defails are
    backend-specific.
    """

    @property
    @abstractmethod
    def bare_jid(self) -> str:
        pass

    @property
    @abstractmethod
    def device_id(self) -> int:
        pass

class KeyExchange(ABC):
    """
    Key exchange information, generated by the active part of the session building process, then transferred
    to and consumed by the passive part of the session building process. Details are backend-specific.
    """

    @property
    @abstractmethod
    def identity_key(self) -> bytes:
        pass

    @abstractmethod
    def __eq__(self, other: object) -> bool:
        """
        Check an object for equality with this KeyExchange instance.

        Args:
            other: The object to compare to this instance.

        Returns:
            Whether the other object holds key exchange information equivalent with this instance. The
            intention is to find out whether both KeyExchange instances would build the same session.
        """

class Message(NamedTuple):
    """
    Simple structure representing an OMEMO-encrypted message.
    """

    namespace: str
    bare_jid: str
    device_id: int
    content: Content
    keys: Set[Tuple[KeyMaterial, Optional[KeyExchange]]]
